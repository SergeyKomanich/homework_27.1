Строковые константы
В этом модуле определены следующие константы:

string.ascii_letters
Конкатенация ascii_lowercaseи ascii_uppercase констант описаны ниже. Это значение не зависит от языкового стандарта.

string.ascii_lowercase
Строчные буквы 'abcdefghijklmnopqrstuvwxyz'. Это значение не зависит от локали и не изменится.

string.ascii_uppercase
Заглавные буквы 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Это значение не зависит от локали и не изменится.

string.digits
Строка '0123456789'.

string.hexdigits
Строка '0123456789abcdefABCDEF'.

string.octdigits
Строка '01234567'.

string.punctuation
Строка ASCII символов , которые считаются знаки препинания в Cлокали: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~.

string.printable
Строка символов ASCII, которые считаются печатаемыми. Это сочетание digits, ascii_letters, punctuation, и whitespace.

string.whitespace
Строка, содержащая все символы ASCII, которые считаются пробелами. Это включает в себя пространство символов, табуляцию,
перевод строки, возврат, перевод страницы и вертикальную табуляцию.

Пользовательское форматирование строки
Встроенный строковый класс предоставляет возможность выполнять сложные подстановки переменных и форматирование значений
с помощью format()метода, описанного в PEP 3101 . FormatterКласс вstringмодуле позволяет создавать и настраивать свои
собственные строки форматирования поведенияиспользуя ту же реализациюкачестве встроенногоformat()метода.

класс string.Formatter
У Formatterкласса есть следующие общедоступные методы:

format( формат_строка , / , * аргументы , ** kwargs )
Основной метод API. Он принимает строку формата и произвольный набор позиционных и ключевых аргументов.
Это просто вызывающая оболочка vformat().

Изменено в версии 3.7: аргумент строки формата теперь является только позиционным .

vformat( format_string , args , kwargs )
Эта функция выполняет фактическую работу по форматированию. Она подвергается как отдельная функция для случаев,
когда вы хотите передать в предустановленном словаре аргументов, а не распаковки и переупаковка словаря как отдельные
аргументы , используя *argsи **kwargs синтаксис. vformat()выполняет работу по разбиению строки формата на
символьные данные и поля замены. Он вызывает различные методы, описанные ниже.

Кроме того, он Formatterопределяет ряд методов, которые предполагается заменить подклассами:

parse( формат_строка )
Цикл по format_string и возвращает итератор кортежей ( literal_text , field_name , format_spec , преобразование ).
Это используется vformat()для разбиения строки на буквальный текст или поля замены.

Значения в кортеже концептуально представляют собой диапазон буквального текста, за которым следует одно поле замены.
Если буквального текста нет (что может произойти, если два поля замены встречаются последовательно), то literal_text будет строкой нулевой длины. Если нет поля замены, то значения field_name , format_spec и преобразование будет None.

get_field( имя_поля , аргументы , kwargs )
Учитывая field_name, возвращаемое parse()(см. Выше), преобразуйте его в форматируемый объект. Возвращает кортеж (obj, used_key).
Версия по умолчанию принимает строки формы, определенной вPEP 3101 , например «0 [имя]» или «label.title». args и kwargs
передаются в vformat(). Возвращаемое значение used_key имеет то же значение, что и ключевой параметр дляget_value().

get_value( ключ , аргументы , kwargs )
Получить заданное значение поля. Ключевой аргумент будет либо целым числом или строкой. Если это целое число,
оно представляет индекс позиционного аргумента в args ; если это строка, то она представляет именованный аргумент в kwargs .

Параметр args установлен на список позиционных аргументов vformat(), а параметр kwargs установлен на словарь аргументов
ключевого слова.

Для составных имен полей эти функции вызываются только для первого компонента имени поля; последующие компоненты
обрабатываются с помощью обычных операций с атрибутами и индексации.

Так, например, выражение поля '0.name' вызовет get_value()вызов с ключевым аргументом 0. name Атрибут будет
просматриваться после get_value()возврата путем вызова встроенной getattr()функции.

Если индекс или ключевое слово относится к элементу , который не существует, тогда IndexErrorили KeyErrorдолжен быть поднят.

check_unused_args( used_args , args , kwargs )
При желании выполните проверку неиспользуемых аргументов. Аргументы этой функции - это набор всех ключей аргументов,
которые фактически упоминались в строке формата (целые числа для позиционных аргументов и строки для именованных аргументов),
а также ссылка на аргументы и kwargs, которые были переданы в vformat. Набор неиспользуемых аргументов может быть рассчитан
по этим параметрам. check_unused_args()предполагается, что вызовет исключение, если проверка не удалась.

format_field( значение , формат_спец )
format_field()просто вызывает глобальный format()встроенный. Метод предоставляется таким образом, чтобы подклассы
могли его переопределить.

convert_field( ценность , конверсия )
Преобразует значение (возвращаемое get_field()) с учетом типа преобразования (как в кортеже, возвращаемом parse()методом).
Версия по умолчанию поддерживает типы преобразования 's' (str), 'r' (repr) и 'a' (ascii).

Синтаксис строки формата
str.format()Метод и Formatterкласс разделяют один и тот же синтаксис для строк формата (хотя в случае Formatter,
подклассы могут определить свой собственный формат синтаксис строки). Синтаксис аналогичен синтаксису форматированных
строковых литералов , но менее сложен и, в частности, не поддерживает произвольные выражения.

Строки формата содержат «замещающие поля», заключенные в фигурные скобки {}. Все, что не заключено в фигурные скобки,
считается буквальным текстом, который копируется в вывод без изменений. Если вам нужно включить фигурную скобку в буквальный текст,
ее можно избежать, удвоив: {{и }}.

Грамматика для поля замены следующая:
поле_замены :: = "{" [ field_name] ["!" conversion] [":" format_spec] "}"
имя_поля        :: = имя_аргумента ("." attribute_name| "[" element_index"]") *
arg_name          :: = [ identifier| digit+]
имя_атрибута    :: =  identifier
element_index     :: =   digit+ |index_string
index_string      :: = <любой исходный символ, кроме "]"> +
преобразование        :: = "r" | "с" | "а"
format_spec       :: = <описано в следующем разделе>